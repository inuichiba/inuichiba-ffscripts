name: 🔁 upabase user-tables Ping (every other day)
# エラーがあったときだけGitHubからメール通知があるとともにDiscordに通知されます。
# GitHub Secrets: DISCORD_WEBHOOK_URL を使用
# Cloudflare Workers経由の通知は廃止し、無料枠のリクエスト消費を完全にゼロに抑えています。
# Cloudflare Workers経由に戻すなら、secrets：WORKERS_NOTIFY_URL にすればいいです(ただし課金枠に入ります)。

on:
  schedule:
    - cron: '5 3 */2 * *'   # 隔日（UTC 03:05 = JST 12:05）
  workflow_dispatch:

concurrency:
  group: supabase-ping
  cancel-in-progress: true

jobs:
  ping-supabase:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: 📡 Ping tables (serial with diagnostics + summary)
        shell: bash
        run: |
          # どんなエラーでもERRトラップが動くように -E を付与
          set -Eeuo pipefail
          set -x

          on_error() {
            # 想定外エラー時の緊急Discord通知（HTTP失敗ルートに入る前でも飛ぶ）
            local now msg
            now=$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M:%S')
            msg="❌ 想定外のエラーで中断（$now JST）\n- 行: $LINENO\n- コマンド: ${BASH_COMMAND}\n- 実行ログ: ${run_url}"
            # 失敗してもジョブの終了はそのまま（|| true）
            curl -s -X POST -H "Content-Type: application/json" \
                 -d "{\"content\":\"$msg\"}" \
                 "$DISCORD_WEBHOOK_URL" || true
          }
          trap 'on_error' ERR

          start_ts=$(date +%s)
          failures=""

          {
            echo "## Supabase ping 結果（隔日）"
            echo ""
            echo "- 実行時刻（JST）: $(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M:%S')"
            echo ""
            echo "| テーブル | HTTP | DNS(resolve) | TCP(connect) | TTFB(starttx) | Total |"
            echo "|---|---:|---:|---:|---:|---:|"
          } >> "$GITHUB_STEP_SUMMARY"

          for table in users_ffprod users_ffprod_archived users_ffdev; do
            echo ""
            echo "🔷 $table を ping 中..."

            fmt='code=%{http_code} resolve=%{time_namelookup}s connect=%{time_connect}s starttx=%{time_starttransfer}s total=%{time_total}s'

            # 安全のため固定の小スリープ
            sleep 1

            out=$(curl --connect-timeout 10 --max-time 60 \
              --retry 2 --retry-delay 2 --retry-connrefused \
              -L -s -o /dev/null -w "$fmt" \
              -H "apikey: $SUPABASE_KEY" \
              -H "Authorization: Bearer $SUPABASE_KEY" \
              "$SUPABASE_URL/rest/v1/$table?select=*&limit=1")

            echo "[$table] $out"

            code=$(echo "$out" | sed -n 's/.*code=\([0-9][0-9][0-9]\).*/\1/p')
            resolve=$(echo "$out" | sed -n 's/.*resolve=\([0-9.]*s\).*/\1/p')
            connect=$(echo "$out" | sed -n 's/.*connect=\([0-9.]*s\).*/\1/p')
            starttx=$(echo "$out" | sed -n 's/.*starttx=\([0-9.]*s\).*/\1/p')
            total=$(echo "$out" | sed -n 's/.*total=\([0-9.]*s\).*/\1/p')

            printf '| %s | %s | %s | %s | %s | %s |\n' "$table" "$code" "$resolve" "$connect" "$starttx" "$total" >> "$GITHUB_STEP_SUMMARY"

            if [ "$code" != "200" ]; then
              failures="${failures}- ${table} → $code\n"
            fi
          done

          end_ts=$(date +%s)
          elapsed=$((end_ts - start_ts))
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**合計所要時間**: ${elapsed}s" >> "$GITHUB_STEP_SUMMARY"

          if [ -n "$failures" ]; then
            now=$(TZ=Asia/Tokyo date "+%Y-%m-%d %H:%M:%S")
            payload="⚠️ Supabase ping失敗（$now JST）\n$failures"
            curl -s -X POST -H "Content-Type: application/json" \
                 -d "{\"content\":\"$payload\"}" \
                 "$DISCORD_WEBHOOK_URL" || true
            exit 1
          fi

          echo "✅ すべてのテーブルに正常にアクセスできました。"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "✅ すべてのテーブルに正常にアクセスできました。" >> "$GITHUB_STEP_SUMMARY"
